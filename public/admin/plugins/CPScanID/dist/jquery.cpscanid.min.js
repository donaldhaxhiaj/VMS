/*
 *  jquery-cpscanid - v1.0.0
 *
 *  http://commprog.com
 *
 *  Made by Endrit Ali
 */
!function (t, n) { var e = function () { }; e.defaults = (e.prototype = { defaults: { callbackReadSuccess: function () { }, callbackReadFail: function () { }, callbackDisconnect: function () { }, extensionDownload: "http://tekreja.al/extension/ScanIDHostSetup.msi" }, isInit: !1, init: function (n) { if (this.isInit) throw "IS_INITIATED"; if (!this.checkExtension()) throw "EXTENSION_NOT_FOUND"; this.isInit = !0, this.reconfigure(n); var e = this; return t.addEventListener("message", function (t) { "CP_SCAN_FUNCTION_RESPONSE" === t.data.type && e.processResponse(t.data.data), "CP_SCAN_HOST_DISCONNECTED" === t.data.type && e.config.callbackDisconnect() }), this.connect(), this }, processResponse: function (t) { var n = {}; t.Success && "READ" === t.Status ? "PR_DOC_UNKNOWN" === t.Document.DocumentType ? (n.Status = "UNKNOWN_DOCUMENT", this.config.callbackReadFail(n)) : "Warning" === t.Document.DocumentStatus ? (n.Status = "READ_WARNING", this.config.callbackReadFail(n)) : "Error" === t.Document.DocumentStatus ? (n.Status = "READ_ERROR", this.config.callbackReadFail(n)) : this.config.callbackReadSuccess(t.Document.DocumentFields) : (n.Status = t.Status, this.config.callbackReadFail(n)) }, reconfigure: function (t) { return this.checkInit(), this.options = t, this.config = n.extend({}, this.defaults, this.options), this }, checkInit: function () { if (!this.isInit) throw "NOT_INITIATED"; return this }, checkExtension: function () { return n("html").hasClass("CPScanID") }, getExtensionUrl: function () { return this.config.extensionDownload }, connect: function () { return this.checkInit(), t.postMessage({ type: "CP_SCAN_HOST_CONNECT", params: "" }, "*"), this }, disconnect: function () { return this.checkInit(), t.postMessage({ type: "CP_SCAN_HOST_DISCONNECT", params: "" }, "*"), this }, exitHost: function () { return this.checkInit(), t.postMessage({ type: "CP_SCAN_CALL_FUNCTION", params: { cmd: "EXIT" } }, "*"), this }, read: function () { return this.checkInit(), t.postMessage({ type: "CP_SCAN_CALL_FUNCTION", params: { cmd: "READ_ID", autodetect: "false" } }, "*"), this }, readAutoDetect: function () { return this.checkInit(), t.postMessage({ type: "CP_SCAN_CALL_FUNCTION", params: { cmd: "READ_ID" } }, "*"), this } }).defaults, n.CPScanID = new e }(window, jQuery);
